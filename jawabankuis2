///no 3 mencari bilangan yang double triple dll
#include <iostream>
using namespace std;

int getExtraElement(int arrA[], int arrB[], int n){
    int arrT[n+1];
    arrT[n] = 1000000000;
    for (int i = 0; i < n ; i++){
        arrT[i] = arrA[i];
    }

    for(int i = 0; i <= n; i++){
        for(int j = 0; j <= n; j++){
            if(arrT[i] <= arrT[j]){
                swap(arrT[i], arrT[j]);
            }
            if(arrB[i] <= arrB[j]){
                swap(arrB[i], arrB[j]);
            }
        }
    }

    for(int i = 0 ; i <= n ; i++){
        if(arrB[i] != arrT[i]){
            return arrB[i];
        }
    }

    return 0;
}


int main(){

    int arrA[] = {1,4,2,5,7};
    int arrB[] = {1,2,4,2,2,7,5};

    cout << getExtraElement(arrA, arrB, 5);

    return 0;
}//output 2






///no 4
#include <iostream>
using namespace std;

void rotate(int arr[], int n){
    int temp = arr[0];
    for(int i = 0; i< n-1; i++){
        arr[i] = arr[i+1];
    }
    arr[n-1] = temp; 
}

int main(){
    int arr[] = {1,2,3,4,5};
    int n = sizeof(arr) / sizeof(arr[0]);

    rotate(arr, n);

    for(int i = 0; i< n; i++){
        cout << arr[i] << " ";
    }
    return 0;
}//output 2 3 4 5 1





///no5 mencari 3 bilangan terbesar
#include <iostream>
using namespace std;

void topThreeElements(int arr[], int n)
{

    if (n < 3)
    {
        cout << "Input tidak sesuai, ukuran array kurang dari 3";
    }
    else
    {

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (arr[i] >= arr[j])
                {
                    swap(arr[i], arr[j]);
                }
            }
        }

        for (int i = 0; i < 3; i++)
        {
            cout << arr[i] << " ";
        }
    }
}

int main()
{
    int arr[] = {6,8,1,9,2,1,10,10};
    int n = sizeof(arr) / sizeof(arr[0]);

    topThreeElements(arr, n);

    return 0;
}//output 10 10 9




///no 6 mencari bilangan sama dalam 3 array
#include <iostream>
using namespace std;

void common (int a[], int b[], int c[], int x, int y, int z){
    for(int i = 0; i < x; i++){
        for(int j = 0; j < y; j++){
            for(int k = 0; k < z; k++){
                if(a[i] == b[j] && a[i] == c[k] && b[j] == c[k]){
                    cout << c[k] << " ";
                }
            }
        }
    }

}


int main(){
    int a[] = {1,2,3,4,5,6,7,8,9,10};
    int b[] = {1,3,5,6,7,8,12};
    int c[] = {2,3,4,5,8,9};

    int x = sizeof(a)/sizeof(a[0]);
    int y = sizeof(b)/sizeof(b[0]);
    int z = sizeof(c)/sizeof(c[0]);
    common(a, b, c, x, y, z);
    return 0;
}//output 3 5 8





///no 7 
#include <iostream>
using namespace std;


long largestNumber (int arr[], int n){
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if(arr[i] <= arr[j]){
                swap(arr[i], arr[j]);
            }
        }
    }
    long hasil = 0;
    int temp = 1;
    int tempArr = 0;
    for(int i = 0; i < n; i++){
        tempArr = arr[i] * temp;
        hasil += tempArr;
        temp *= 10;
    }
    return hasil;
}

int main (){
    int arr[] = {1,2,3,4,5};
    
    cout << largestNumber(arr, 5);

    return 0;
}//output 54321





///no 8 duplikat 0
#include <iostream>
using namespace std;

void dupzero(int arr[], int n){
    for (int i = 0; i < n - 1; ++i) {
        if (arr[i] == 0) {
            for (int j = n - 2; j > i; --j) {
                arr[j + 1] = arr[j];
            }
            arr[i + 1] = 0;
            ++i;
        }
    }
}

int main(){
    int arr[8] = {1,0,2,3,0,4,5,0};
    dupzero(arr, 8);
    for(int i = 0; i < 8; i++){
        cout << arr[i] << " ";
    }
    return 0;
}//output 1 0 0 2 3 0 0 4




///no 9 true false temukan 3 bilangan ganjil berturut turut jika ada true
#include <iostream>
using namespace std;

bool check (int arr[], int n){
    for(int i = 0; i < n-3; i++){
        if(arr[i] % 2 == 1 && arr[i+1] % 2 == 1 && arr[i+2] % 2 == 1){
            return true;
        }
    }
    return false;
}

int main(){
    int arr[8] = {2,4,1,2,5,2,3,6};
    cout << check(arr, 8);
    return 0;
}
